{
 "num": 1,
 "title": "解释器\n编辑\n锁定",
 "main": "解释器（英语：Interpreter），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。",
 "url": "https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E5%99%A8"
},
{
 "num": 2,
 "title": "编程语言\n编辑\n锁定",
 "main": "编程语言（programming language），是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。一种计算机语言让程序员能够准确地定义计算机所需要使用的数据，并精确地定义在不同情况下所应当采取的行动。\n[1] \n最早的编程语言是在电脑发明之后产生的，当时是用来控制提花织布机及自动演奏钢琴的动作。在电脑领域已发明了上千不同的编程语言，而且每年仍有新的编程语言诞生。很多编程语言需要用指令方式说明计算的程序，而有些编程语言则属于声明式编程，说明需要的结果，而不说明如何计算。\n[1] \n编程语言的描述一般可以分为语法及语义。语法是说明编程语言中，哪些符号或文字的组合方式是正确的，语义则是对于编程的解释。有些语言是用规格文件定义，例如C语言的规格文件也是ISO标准中一部份，2011年后的版本为ISO/IEC 9899:2011，而其他语言（像Perl）有一份主要的编程语言实现文件，视为是参考实现。\n[1] \n编程语言俗称“计算机语言”，种类非常的多，总的来说可以分成机器语言、汇编语言、高级语言三大类。电脑每做的一次动作，一个步骤，都是按照已经用计算机语言编好的程序来执行的，程序是计算机要执行的指令的集合，而程序全部都是用我们所掌握的语言来编写的。所以人们要控制计算机一定要通过计算机语言向计算机发出命令。 目前通用的编程语言有两种形式：汇编语言和高级语言。\n[1]",
 "url": "https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80"
}{
 "num": 3,
 "title": "批量处理\n编辑\n锁定",
 "main": "批量处理是在一个批次中包含所有单独的支付指令，处理多笔单独的支付业务。",
 "url": "https://baike.baidu.com/item/%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86"
}{
 "num": 4,
 "title": "UCSD Pascal\n编辑\n锁定",
 "main": "",
 "url": "https://baike.baidu.com/item/UCSD%20Pascal"
}{
 "num": 5,
 "title": "关系数据库系统\n编辑\n锁定",
 "main": "关系数据库系统指对应于一个关系模型的所有关系的集合。关系数据库系统建立了关系模型，并用它来处理数据。关系模型在表中将信息与字段关联起来（也就是schemas），从而存储数据\n[1] \n。数据库管理系统需要结构（例如表）在存储数据之前被定义出来。有了表，每一列（字段）都存储一个不同类型（数据类型）的信息。数据库中的每个记录，都有自己唯一的key，作为属于某一表的一行，行中的每一个信息都对应了表中的一列——所有的关系一起，构成了关系模型\n[1] \n。",
 "url": "https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F"
}{
 "num": 6,
 "title": "负载均衡\n编辑\n锁定",
 "main": "负载均衡  建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。",
 "url": "https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"
}{
 "num": 7,
 "title": "抽象语法树\n编辑\n锁定",
 "main": "抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。和抽象语法树相对的是具体语法树（concrete syntaxtree），通常称作分析树（parse tree）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树。一旦AST被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。\n[1]",
 "url": "https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91"
}